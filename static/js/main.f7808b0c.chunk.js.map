{"version":3,"sources":["pages/Networth.jsx","App.js","reportWebVitals.js","index.js"],"names":["Networth","props","state","error","isLoaded","items","fetch","then","res","json","result","setState","reverse","this","data","forEach","item","index","date","Date","createdAt","push","toLocaleDateString","networth","getNetworth","slice","transactions","cad","btc","eth","type","from","currency","amount","to","creditOrDebit","direction","className","message","LineChart","width","height","formatData","Line","name","dataKey","stroke","activeDot","r","CartesianGrid","strokeDasharray","XAxis","label","value","fill","dy","interval","YAxis","angle","position","Tooltip","formatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","Legend","verticalAlign","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7808b0c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nconst BTC_RATE = 43399.09;\r\nconst ETH_RATE = 3018.59;\r\n\r\nclass Networth extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://shakepay.github.io/programming-exercise/web/transaction_history.json\"\r\n    )\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.reverse(),\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  formatData() {\r\n    const { items } = this.state;\r\n    let data = [];\r\n    items.forEach((item, index) => {\r\n      const date = new Date(item.createdAt);\r\n      data.push({\r\n        date: date.toLocaleDateString(),\r\n        networth: this.getNetworth(items.slice(0, index)),\r\n      });\r\n    });\r\n    return data;\r\n  }\r\n\r\n  getNetworth(transactions) {\r\n    let cad = 0.0,\r\n      btc = 0.0,\r\n      eth = 0.0;\r\n    transactions.forEach((item) => {\r\n      if (item.type === \"conversion\") {\r\n        if (item.from.currency === \"CAD\") {\r\n          cad -= item.from.amount;\r\n        } else if (item.currency === \"BTC\") {\r\n          btc -= item.from.amount;\r\n        } else if (item.currency === \"ETH\") {\r\n          eth -= item.from.amount;\r\n        }\r\n        if (item.to.currency === \"CAD\") {\r\n          cad += item.to.amount;\r\n        } else if (item.to.currency === \"BTC\") {\r\n          btc += item.to.amount;\r\n        } else if (item.to.currency === \"ETH\") {\r\n          eth += item.to.amount;\r\n        }\r\n      } else {\r\n        let creditOrDebit = item.direction === \"credit\";\r\n        if (item.currency === \"CAD\") {\r\n          creditOrDebit ? (cad += item.amount) : (cad -= item.amount);\r\n        } else if (item.currency === \"BTC\") {\r\n          creditOrDebit ? (btc += item.amount) : (btc -= item.amount);\r\n        } else if (item.currency === \"ETH\") {\r\n          creditOrDebit ? (eth += item.amount) : (eth -= item.amount);\r\n        }\r\n      }\r\n    });\r\n    return cad + btc * BTC_RATE + eth * ETH_RATE;\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded } = this.state;\r\n    if (error) {\r\n      return <div className=\"title\">Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div className=\"title\">Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"App-header\">\r\n          <h2 className=\"title\">My Shakepay Networth</h2>\r\n          <LineChart width={1000} height={600} data={this.formatData()}>\r\n            <Line\r\n              name=\"Networth\"\r\n              type=\"monotone\"\r\n              dataKey=\"networth\"\r\n              stroke=\"#8884d8\"\r\n              activeDot={{ r: 4 }}\r\n            />\r\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              height={50}\r\n              label={{ value: \"Dates\", fill: \"#8884d8\", dy: 15 }}\r\n              interval={75}\r\n              dataKey=\"date\"\r\n            />\r\n            <YAxis\r\n              width={100}\r\n              label={{\r\n                value: \"CAD\",\r\n                angle: -90,\r\n                position: \"insideLeft\",\r\n                fill: \"#8884d8\",\r\n              }}\r\n            />\r\n            <Tooltip\r\n              formatter={(value) =>\r\n                new Intl.NumberFormat(\"en-CA\", {\r\n                  style: \"currency\",\r\n                  currency: \"CAD\",\r\n                  minimumFractionDigits: 2,\r\n                  maximumFractionDigits: 2,\r\n                }).format(value)\r\n              }\r\n            />\r\n            <Legend verticalAlign=\"top\" height={36} />\r\n          </LineChart>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Networth;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Networth from \"./pages/Networth\";\r\n\r\nfunction App() {\r\n  return <Networth className=\"App App-header\" />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}