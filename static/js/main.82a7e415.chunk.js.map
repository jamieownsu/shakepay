{"version":3,"sources":["pages/Networth.jsx","App.js","reportWebVitals.js","index.js"],"names":["Networth","props","state","error","isLoaded","items","fetch","then","res","json","result","setState","reverse","this","data","forEach","item","index","date","Date","createdAt","push","toLocaleDateString","networth","getNetworth","slice","transactions","cad","btc","eth","type","from","currency","amount","to","creditOrDebit","direction","className","message","LineChart","width","height","formatData","Line","dataKey","stroke","activeDot","r","CartesianGrid","strokeDasharray","XAxis","label","value","interval","YAxis","angle","position","Tooltip","formatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","Legend","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82a7e415.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nconst BTC_RATE = 0.00002246;\nconst ETH_RATE = 0.000322321609642528;\n\nclass Networth extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      \"https://shakepay.github.io/programming-exercise/web/transaction_history.json\"\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.reverse(),\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n\n  formatData() {\n    const { items } = this.state;\n    let data = [];\n    items.forEach((item, index) => {\n      const date = new Date(item.createdAt);\n      data.push({\n        date: date.toLocaleDateString(),\n        networth: this.getNetworth(items.slice(0, index)),\n      });\n    });\n    return data;\n  }\n\n  getNetworth(transactions) {\n    let cad = 0.0,\n      btc = 0.0,\n      eth = 0.0;\n    transactions.forEach((item) => {\n      if (item.type === \"conversion\") {\n        if (item.from.currency === \"CAD\") {\n          cad -= item.from.amount;\n        } else if (item.currency === \"BTC\") {\n          btc -= item.from.amount;\n        } else if (item.currency === \"ETH\") {\n          eth -= item.from.amount;\n        }\n        if (item.to.currency === \"CAD\") {\n          cad += item.to.amount;\n        } else if (item.to.currency === \"BTC\") {\n          btc += item.to.amount;\n        } else if (item.to.currency === \"ETH\") {\n          eth += item.to.amount;\n        }\n      } else {\n        let creditOrDebit = item.direction === \"credit\";\n        if (item.currency === \"CAD\") {\n          creditOrDebit ? (cad += item.amount) : (cad -= item.amount);\n        } else if (item.currency === \"BTC\") {\n          creditOrDebit ? (btc += item.amount) : (btc -= item.amount);\n        } else if (item.currency === \"ETH\") {\n          creditOrDebit ? (eth += item.amount) : (eth -= item.amount);\n        }\n      }\n    });\n    return cad + btc * BTC_RATE + eth * ETH_RATE;\n  }\n\n  render() {\n    const { error, isLoaded } = this.state;\n    if (error) {\n      return <div className=\"title\">Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div className=\"title\">Loading...</div>;\n    } else {\n      return (\n        <div className=\"App-header\">\n          <h2 className=\"title\">My Shakepay Networth</h2>\n          <LineChart width={1000} height={600} data={this.formatData()}>\n            <Line\n              type=\"monotone\"\n              dataKey=\"networth\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 4 }}\n            />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n            <XAxis label={{ value: \"Dates\" }} interval={100} dataKey=\"date\" />\n            <YAxis\n              label={{ value: \"CAD\", angle: -90, position: \"insideLeft\" }}\n            />\n            <Tooltip\n              formatter={(value) =>\n                new Intl.NumberFormat(\"en-CA\", {\n                  style: \"currency\",\n                  currency: \"CAD\",\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2,\n                }).format(value)\n              }\n            />\n            <Legend />\n          </LineChart>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Networth;\n","import React from \"react\";\nimport \"./App.css\";\nimport Networth from \"./pages/Networth\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Networth />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}